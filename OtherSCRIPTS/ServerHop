_G.gge = _G.gge or false
if _G.gge then
    print("already")
    return
end
_G.gge = true

local PlaceID = game.PlaceId
local AllIDs = {}
local foundAnything = ""
local actualHour = os.date("!*t").hour
local HttpService = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")
local LocalPlayer = game.Players.LocalPlayer

local isTeleporting = false -- ‚ö†Ô∏è –ù–æ–≤—ã–π —Ñ–ª–∞–≥, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞–º–∏

-- –ß–∏—Ç–∞–µ–º/—Å–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª
local success, result = pcall(function()
    return HttpService:JSONDecode(readfile("NotSameServers.json"))
end)
if success and type(result) == "table" then
    AllIDs = result
else
    table.insert(AllIDs, actualHour)
    writefile("NotSameServers.json", HttpService:JSONEncode(AllIDs))
end

-- –¢–µ–ª–µ–ø–æ—Ä—Ç –≤ –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
function TPReturner()
    if isTeleporting then return end -- üö´ –±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π —Ç–µ–ª–µ–ø–æ—Ä—Ç

    local Site
    if foundAnything == "" then
        Site = HttpService:JSONDecode(game:HttpGet(
            "https://games.roblox.com/v1/games/" .. PlaceID .. "/servers/Public?sortOrder=Asc&limit=100"
        ))
    else
        Site = HttpService:JSONDecode(game:HttpGet(
            "https://games.roblox.com/v1/games/" .. PlaceID .. "/servers/Public?sortOrder=Asc&limit=100&cursor=" .. foundAnything
        ))
    end

    if Site.nextPageCursor and Site.nextPageCursor ~= "null" then
        foundAnything = Site.nextPageCursor
    end

    local num = 0
    for _, v in pairs(Site.data) do
        local ID = tostring(v.id)
        local Possible = true

        if tonumber(v.playing) < 10 and tonumber(v.playing) < tonumber(v.maxPlayers) then
            for _, Existing in pairs(AllIDs) do
                if num ~= 0 then
                    if ID == tostring(Existing) then
                        Possible = false
                        break
                    end
                else
                    if tonumber(actualHour) ~= tonumber(Existing) then
                        pcall(function()
                            delfile("NotSameServers.json")
                            AllIDs = { actualHour }
                        end)
                    end
                end
                num = num + 1
            end

            if Possible then
                table.insert(AllIDs, ID)
                writefile("NotSameServers.json", HttpService:JSONEncode(AllIDs))
                
                print("üåÄ –¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É–µ–º—Å—è –≤ —Å–µ—Ä–≤–µ—Ä:", ID)
                isTeleporting = true

                local success, err = pcall(function()
                    TeleportService:TeleportToPlaceInstance(PlaceID, ID, LocalPlayer)
                end)

                if not success then
                    warn("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏–∏:", err)
                    isTeleporting = false
                end

                task.wait(5)
                break -- üõë –≤—ã—Ö–æ–¥–∏–º, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å –¥—Ä—É–≥–∏–º–∏ —Å–µ—Ä–≤–µ—Ä–∞–º–∏
            end
        end
    end
end

-- –°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ –ø—Ä–∏ –Ω–µ—É–¥–∞—á–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞
TeleportService.TeleportInitFailed:Connect(function(result)
    warn("‚ö†Ô∏è –¢–µ–ª–µ–ø–æ—Ä—Ç –Ω–µ —É–¥–∞–ª—Å—è:", result)
    isTeleporting = false
end)

-- –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
function Teleport()
    while task.wait(3) do -- —á—É—Ç—å –¥–æ–ª—å—à–µ –º–µ–∂–¥—É –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏
        if not isTeleporting then
            pcall(TPReturner)
        end
    end
end

-- üöÄ –ó–∞–ø—É—Å–∫
Teleport()
