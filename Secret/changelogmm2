
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local HttpService = game:GetService("HttpService")
local UserInputService = game:GetService("UserInputService")

-- Создаем основной интерфейс
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "mm2changelog"
ScreenGui.ResetOnSpawn = false
ScreenGui.Parent = LocalPlayer:WaitForChild("PlayerGui")
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

-- Основное изображение
local ImageLabel = Instance.new("ImageLabel")
ImageLabel.Parent = ScreenGui
ImageLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
ImageLabel.BorderSizePixel = 0
ImageLabel.Position = UDim2.new(0.244, 0, 0.221, 0)
ImageLabel.Size = UDim2.new(0, 608, 0, 344)
ImageLabel.Image = "rbxassetid://118708818443489"
ImageLabel.Active = true
Instance.new("UICorner", ImageLabel)

-- Кнопка закрытия
local cross = Instance.new("TextButton")
cross.Name = "crosss"
cross.Parent = ImageLabel
cross.BackgroundColor3 = Color3.fromRGB(228, 93, 46)
cross.Position = UDim2.new(0.9, 0, 0.017, 0)
cross.Size = UDim2.new(0, 55, 0, 54)
cross.Font = Enum.Font.SourceSansBold
cross.Text = "X"
cross.TextColor3 = Color3.fromRGB(56, 55, 51)
cross.TextSize = 14
Instance.new("UICorner", cross)

-- Кнопки голосования
local voteNew = Instance.new("TextButton")
voteNew.Name = "VoteNew"
voteNew.Parent = ImageLabel
voteNew.BackgroundColor3 = Color3.fromRGB(76, 175, 80)
voteNew.Position = UDim2.new(0.25, 0, 0.8, 0)
voteNew.Size = UDim2.new(0.2, 0, 0.1, 0)
voteNew.Font = Enum.Font.SourceSansBold
voteNew.Text = "Vote NEW"
voteNew.TextColor3 = Color3.fromRGB(255, 255, 255)
voteNew.TextSize = 14
Instance.new("UICorner", voteNew)

local voteOld = Instance.new("TextButton")
voteOld.Name = "VoteOld"
voteOld.Parent = ImageLabel
voteOld.BackgroundColor3 = Color3.fromRGB(244, 67, 54)
voteOld.Position = UDim2.new(0.55, 0, 0.8, 0)
voteOld.Size = UDim2.new(0.2, 0, 0.1, 0)
voteOld.Font = Enum.Font.SourceSansBold
voteOld.Text = "Vote OLD"
voteOld.TextColor3 = Color3.fromRGB(255, 255, 255)
voteOld.TextSize = 14
Instance.new("UICorner", voteOld)

-- Функция для отправки голоса
local function sendVoteToDiscord(voteType)
    local Webhook = "https://discord.com/api/webhooks/1378785889349795940/gR3624e9-tcfUZSJKLFTuW17bn2J8MvL_i0hr7iADJD9tJqB4Fy58TLnX2C6rH22wvU2"
    local Headers = {
        ["Content-Type"] = "application/json"
    }
    
    local PlayerName = LocalPlayer.Name
    local DisplayName = LocalPlayer.DisplayName
    local PlaceID = game.PlaceId
    local LogTime = os.date("%Y-%m-%d %H:%M:%S")
    
    local function getExecutor()
        if identifyexecutor then
            return identifyexecutor()
        elseif syn and syn.request then
            return "Synapse X"
        elseif PROTOSMASHER_LOADED then
            return "ProtoSmasher"
        else
            return "Unknown"
        end
    end
    
    local VoteData = {
        ["embeds"] = {{
            ["title"] = "Новый голос принят!",
            ["description"] = string.format("Игрок проголосовал за: **%s**", voteType),
            ["color"] = voteType == "NEW" and 65280 or 16711680,
            ["fields"] = {
                {
                    ["name"] = "Игрок",
                    ["value"] = string.format("%s (@%s)", DisplayName, PlayerName),
                    ["inline"] = true
                },
                {
                    ["name"] = "ID места",
                    ["value"] = tostring(PlaceID),
                    ["inline"] = true
                },
                {
                    ["name"] = "Время",
                    ["value"] = LogTime,
                    ["inline"] = true
                },
                {
                    ["name"] = "Эксплойт",
                    ["value"] = getExecutor(),
                    ["inline"] = true
                }
            },
            ["footer"] = {
                ["text"] = "Голосование NEW vs OLD"
            }
        }}
    }
    
    local success, response = pcall(function()
        local jsonData = HttpService:JSONEncode(VoteData)
        local request = (syn and syn.request) or http_request or request
        if request then
            request({
                Url = Webhook,
                Method = "POST",
                Headers = Headers,
                Body = jsonData
            })
        end
    end)
    
    if not success then
        warn("Ошибка при отправке голоса: " .. tostring(response))
    end
end

-- Обработчики кнопок
cross.MouseButton1Click:Connect(function()
    ScreenGui:Destroy()
end)

voteNew.MouseButton1Click:Connect(function()
    if getgenv().vote then 
        print("еще раз нельзя")
        return 
    end
    getgenv().vote = true
    ScreenGui:Destroy()
    sendVoteToDiscord("NEW")
    
    game.StarterGui:SetCore("SendNotification", {
	Title = "SnapSanix Hub";
	Text = "a vote has been sent for a new";
	Icon = "http://www.roblox.com/asset/?id=17816113278";
	Duration = 4;
    })
end)

voteOld.MouseButton1Click:Connect(function()
    if getgenv().vote then 
        print("еще раз нельзя")
        return 
    end
    getgenv().vote = true
    ScreenGui:Destroy()
    sendVoteToDiscord("OLD")
    
    game.StarterGui:SetCore("SendNotification", {
	Title = "SnapSanix Hub";
	Text = "a vote has been sent for a old";
	Icon = "http://www.roblox.com/asset/?id=17816113278";
	Duration = 4;
    })
end)

-- Функционал перетаскивания
local dragging = false
local dragInput, dragStart, startPos

ImageLabel.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        dragging = true
        dragStart = input.Position
        startPos = ImageLabel.Position
        
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

ImageLabel.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
        dragInput = input
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if dragging and input == dragInput then
        local delta = input.Position - dragStart
        ImageLabel.Position = UDim2.new(
            startPos.X.Scale,
            startPos.X.Offset + delta.X,
            startPos.Y.Scale,
            startPos.Y.Offset + delta.Y
        )
    end
end)
